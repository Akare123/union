// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cometbft/consensus/v1beta1/types.proto

package consensusv1beta1

import (
	v1 "buf.build/gen/go/cometbft/cometbft/protocolbuffers/go/cometbft/libs/bits/v1"
	v1beta1 "buf.build/gen/go/cometbft/cometbft/protocolbuffers/go/cometbft/types/v1beta1"
	_ "buf.build/gen/go/cosmos/gogo-proto/protocolbuffers/go/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NewRoundStep is sent for every step taken in the ConsensusState.
// For every height/round/step transition
type NewRoundStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height                int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round                 int32  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Step                  uint32 `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	SecondsSinceStartTime int64  `protobuf:"varint,4,opt,name=seconds_since_start_time,json=secondsSinceStartTime,proto3" json:"seconds_since_start_time,omitempty"`
	LastCommitRound       int32  `protobuf:"varint,5,opt,name=last_commit_round,json=lastCommitRound,proto3" json:"last_commit_round,omitempty"`
}

func (x *NewRoundStep) Reset() {
	*x = NewRoundStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRoundStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRoundStep) ProtoMessage() {}

func (x *NewRoundStep) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRoundStep.ProtoReflect.Descriptor instead.
func (*NewRoundStep) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{0}
}

func (x *NewRoundStep) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NewRoundStep) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *NewRoundStep) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *NewRoundStep) GetSecondsSinceStartTime() int64 {
	if x != nil {
		return x.SecondsSinceStartTime
	}
	return 0
}

func (x *NewRoundStep) GetLastCommitRound() int32 {
	if x != nil {
		return x.LastCommitRound
	}
	return 0
}

// NewValidBlock is sent when a validator observes a valid block B in some round r,
// i.e., there is a Proposal for block B and 2/3+ prevotes for the block B in the round r.
// In case the block is also committed, then IsCommit flag is set to true.
type NewValidBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height             int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round              int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	BlockPartSetHeader *v1beta1.PartSetHeader `protobuf:"bytes,3,opt,name=block_part_set_header,json=blockPartSetHeader,proto3" json:"block_part_set_header,omitempty"`
	BlockParts         *v1.BitArray           `protobuf:"bytes,4,opt,name=block_parts,json=blockParts,proto3" json:"block_parts,omitempty"`
	IsCommit           bool                   `protobuf:"varint,5,opt,name=is_commit,json=isCommit,proto3" json:"is_commit,omitempty"`
}

func (x *NewValidBlock) Reset() {
	*x = NewValidBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewValidBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewValidBlock) ProtoMessage() {}

func (x *NewValidBlock) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewValidBlock.ProtoReflect.Descriptor instead.
func (*NewValidBlock) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{1}
}

func (x *NewValidBlock) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NewValidBlock) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *NewValidBlock) GetBlockPartSetHeader() *v1beta1.PartSetHeader {
	if x != nil {
		return x.BlockPartSetHeader
	}
	return nil
}

func (x *NewValidBlock) GetBlockParts() *v1.BitArray {
	if x != nil {
		return x.BlockParts
	}
	return nil
}

func (x *NewValidBlock) GetIsCommit() bool {
	if x != nil {
		return x.IsCommit
	}
	return false
}

// Proposal is sent when a new block is proposed.
type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal *v1beta1.Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{2}
}

func (x *Proposal) GetProposal() *v1beta1.Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

// ProposalPOL is sent when a previous proposal is re-proposed.
type ProposalPOL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height           int64        `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ProposalPolRound int32        `protobuf:"varint,2,opt,name=proposal_pol_round,json=proposalPolRound,proto3" json:"proposal_pol_round,omitempty"`
	ProposalPol      *v1.BitArray `protobuf:"bytes,3,opt,name=proposal_pol,json=proposalPol,proto3" json:"proposal_pol,omitempty"`
}

func (x *ProposalPOL) Reset() {
	*x = ProposalPOL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalPOL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalPOL) ProtoMessage() {}

func (x *ProposalPOL) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalPOL.ProtoReflect.Descriptor instead.
func (*ProposalPOL) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{3}
}

func (x *ProposalPOL) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ProposalPOL) GetProposalPolRound() int32 {
	if x != nil {
		return x.ProposalPolRound
	}
	return 0
}

func (x *ProposalPOL) GetProposalPol() *v1.BitArray {
	if x != nil {
		return x.ProposalPol
	}
	return nil
}

// BlockPart is sent when gossipping a piece of the proposed block.
type BlockPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64         `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round  int32         `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Part   *v1beta1.Part `protobuf:"bytes,3,opt,name=part,proto3" json:"part,omitempty"`
}

func (x *BlockPart) Reset() {
	*x = BlockPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPart) ProtoMessage() {}

func (x *BlockPart) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPart.ProtoReflect.Descriptor instead.
func (*BlockPart) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{4}
}

func (x *BlockPart) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockPart) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *BlockPart) GetPart() *v1beta1.Part {
	if x != nil {
		return x.Part
	}
	return nil
}

// Vote is sent when voting for a proposal (or lack thereof).
type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote *v1beta1.Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{5}
}

func (x *Vote) GetVote() *v1beta1.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// HasVote is sent to indicate that a particular vote has been received.
type HasVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round  int32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Type   v1beta1.SignedMsgType `protobuf:"varint,3,opt,name=type,proto3,enum=cometbft.types.v1beta1.SignedMsgType" json:"type,omitempty"`
	Index  int32                 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *HasVote) Reset() {
	*x = HasVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasVote) ProtoMessage() {}

func (x *HasVote) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasVote.ProtoReflect.Descriptor instead.
func (*HasVote) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{6}
}

func (x *HasVote) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HasVote) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *HasVote) GetType() v1beta1.SignedMsgType {
	if x != nil {
		return x.Type
	}
	return v1beta1.SignedMsgType(0)
}

func (x *HasVote) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// VoteSetMaj23 is sent to indicate that a given BlockID has seen +2/3 votes.
type VoteSetMaj23 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height  int64                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round   int32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Type    v1beta1.SignedMsgType `protobuf:"varint,3,opt,name=type,proto3,enum=cometbft.types.v1beta1.SignedMsgType" json:"type,omitempty"`
	BlockId *v1beta1.BlockID      `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *VoteSetMaj23) Reset() {
	*x = VoteSetMaj23{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteSetMaj23) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSetMaj23) ProtoMessage() {}

func (x *VoteSetMaj23) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSetMaj23.ProtoReflect.Descriptor instead.
func (*VoteSetMaj23) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{7}
}

func (x *VoteSetMaj23) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VoteSetMaj23) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *VoteSetMaj23) GetType() v1beta1.SignedMsgType {
	if x != nil {
		return x.Type
	}
	return v1beta1.SignedMsgType(0)
}

func (x *VoteSetMaj23) GetBlockId() *v1beta1.BlockID {
	if x != nil {
		return x.BlockId
	}
	return nil
}

// VoteSetBits is sent to communicate the bit-array of votes seen for the BlockID.
type VoteSetBits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height  int64                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round   int32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Type    v1beta1.SignedMsgType `protobuf:"varint,3,opt,name=type,proto3,enum=cometbft.types.v1beta1.SignedMsgType" json:"type,omitempty"`
	BlockId *v1beta1.BlockID      `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Votes   *v1.BitArray          `protobuf:"bytes,5,opt,name=votes,proto3" json:"votes,omitempty"`
}

func (x *VoteSetBits) Reset() {
	*x = VoteSetBits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteSetBits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSetBits) ProtoMessage() {}

func (x *VoteSetBits) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSetBits.ProtoReflect.Descriptor instead.
func (*VoteSetBits) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{8}
}

func (x *VoteSetBits) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VoteSetBits) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *VoteSetBits) GetType() v1beta1.SignedMsgType {
	if x != nil {
		return x.Type
	}
	return v1beta1.SignedMsgType(0)
}

func (x *VoteSetBits) GetBlockId() *v1beta1.BlockID {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *VoteSetBits) GetVotes() *v1.BitArray {
	if x != nil {
		return x.Votes
	}
	return nil
}

// Message is an abstract consensus message.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum of all possible messages.
	//
	// Types that are assignable to Sum:
	//
	//	*Message_NewRoundStep
	//	*Message_NewValidBlock
	//	*Message_Proposal
	//	*Message_ProposalPol
	//	*Message_BlockPart
	//	*Message_Vote
	//	*Message_HasVote
	//	*Message_VoteSetMaj23
	//	*Message_VoteSetBits
	Sum isMessage_Sum `protobuf_oneof:"sum"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_cometbft_consensus_v1beta1_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP(), []int{9}
}

func (m *Message) GetSum() isMessage_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Message) GetNewRoundStep() *NewRoundStep {
	if x, ok := x.GetSum().(*Message_NewRoundStep); ok {
		return x.NewRoundStep
	}
	return nil
}

func (x *Message) GetNewValidBlock() *NewValidBlock {
	if x, ok := x.GetSum().(*Message_NewValidBlock); ok {
		return x.NewValidBlock
	}
	return nil
}

func (x *Message) GetProposal() *Proposal {
	if x, ok := x.GetSum().(*Message_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *Message) GetProposalPol() *ProposalPOL {
	if x, ok := x.GetSum().(*Message_ProposalPol); ok {
		return x.ProposalPol
	}
	return nil
}

func (x *Message) GetBlockPart() *BlockPart {
	if x, ok := x.GetSum().(*Message_BlockPart); ok {
		return x.BlockPart
	}
	return nil
}

func (x *Message) GetVote() *Vote {
	if x, ok := x.GetSum().(*Message_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *Message) GetHasVote() *HasVote {
	if x, ok := x.GetSum().(*Message_HasVote); ok {
		return x.HasVote
	}
	return nil
}

func (x *Message) GetVoteSetMaj23() *VoteSetMaj23 {
	if x, ok := x.GetSum().(*Message_VoteSetMaj23); ok {
		return x.VoteSetMaj23
	}
	return nil
}

func (x *Message) GetVoteSetBits() *VoteSetBits {
	if x, ok := x.GetSum().(*Message_VoteSetBits); ok {
		return x.VoteSetBits
	}
	return nil
}

type isMessage_Sum interface {
	isMessage_Sum()
}

type Message_NewRoundStep struct {
	NewRoundStep *NewRoundStep `protobuf:"bytes,1,opt,name=new_round_step,json=newRoundStep,proto3,oneof"`
}

type Message_NewValidBlock struct {
	NewValidBlock *NewValidBlock `protobuf:"bytes,2,opt,name=new_valid_block,json=newValidBlock,proto3,oneof"`
}

type Message_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,3,opt,name=proposal,proto3,oneof"`
}

type Message_ProposalPol struct {
	ProposalPol *ProposalPOL `protobuf:"bytes,4,opt,name=proposal_pol,json=proposalPol,proto3,oneof"`
}

type Message_BlockPart struct {
	BlockPart *BlockPart `protobuf:"bytes,5,opt,name=block_part,json=blockPart,proto3,oneof"`
}

type Message_Vote struct {
	Vote *Vote `protobuf:"bytes,6,opt,name=vote,proto3,oneof"`
}

type Message_HasVote struct {
	HasVote *HasVote `protobuf:"bytes,7,opt,name=has_vote,json=hasVote,proto3,oneof"`
}

type Message_VoteSetMaj23 struct {
	VoteSetMaj23 *VoteSetMaj23 `protobuf:"bytes,8,opt,name=vote_set_maj23,json=voteSetMaj23,proto3,oneof"`
}

type Message_VoteSetBits struct {
	VoteSetBits *VoteSetBits `protobuf:"bytes,9,opt,name=vote_set_bits,json=voteSetBits,proto3,oneof"`
}

func (*Message_NewRoundStep) isMessage_Sum() {}

func (*Message_NewValidBlock) isMessage_Sum() {}

func (*Message_Proposal) isMessage_Sum() {}

func (*Message_ProposalPol) isMessage_Sum() {}

func (*Message_BlockPart) isMessage_Sum() {}

func (*Message_Vote) isMessage_Sum() {}

func (*Message_HasVote) isMessage_Sum() {}

func (*Message_VoteSetMaj23) isMessage_Sum() {}

func (*Message_VoteSetBits) isMessage_Sum() {}

var File_cometbft_consensus_v1beta1_types_proto protoreflect.FileDescriptor

var file_cometbft_consensus_v1beta1_types_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62,
	0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x63, 0x6f, 0x6d, 0x65,
	0x74, 0x62, 0x66, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x69,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x0d, 0x4e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74,
	0x62, 0x66, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x4e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x4f, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x48,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e,
	0x6c, 0x69, 0x62, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x22, 0x71, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x22, 0x38, 0x0a, 0x04, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x56, 0x6f, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6a, 0x32,
	0x33, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0f, 0xc8,
	0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x42, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4b, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xac, 0x05, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x53, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x42, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62,
	0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x4f, 0x4c,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x12,
	0x46, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12,
	0x40, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48,
	0x61, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x68, 0x61, 0x73, 0x56, 0x6f, 0x74,
	0x65, 0x12, 0x50, 0x0a, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x6a, 0x32, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x65,
	0x74, 0x62, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x6a, 0x32, 0x33, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x6a, 0x32, 0x33, 0x12, 0x4d, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x65, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x42,
	0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x42, 0x69,
	0x74, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x42, 0x63, 0x5a, 0x61, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f,
	0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cometbft_consensus_v1beta1_types_proto_rawDescOnce sync.Once
	file_cometbft_consensus_v1beta1_types_proto_rawDescData = file_cometbft_consensus_v1beta1_types_proto_rawDesc
)

func file_cometbft_consensus_v1beta1_types_proto_rawDescGZIP() []byte {
	file_cometbft_consensus_v1beta1_types_proto_rawDescOnce.Do(func() {
		file_cometbft_consensus_v1beta1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_cometbft_consensus_v1beta1_types_proto_rawDescData)
	})
	return file_cometbft_consensus_v1beta1_types_proto_rawDescData
}

var file_cometbft_consensus_v1beta1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_cometbft_consensus_v1beta1_types_proto_goTypes = []any{
	(*NewRoundStep)(nil),          // 0: cometbft.consensus.v1beta1.NewRoundStep
	(*NewValidBlock)(nil),         // 1: cometbft.consensus.v1beta1.NewValidBlock
	(*Proposal)(nil),              // 2: cometbft.consensus.v1beta1.Proposal
	(*ProposalPOL)(nil),           // 3: cometbft.consensus.v1beta1.ProposalPOL
	(*BlockPart)(nil),             // 4: cometbft.consensus.v1beta1.BlockPart
	(*Vote)(nil),                  // 5: cometbft.consensus.v1beta1.Vote
	(*HasVote)(nil),               // 6: cometbft.consensus.v1beta1.HasVote
	(*VoteSetMaj23)(nil),          // 7: cometbft.consensus.v1beta1.VoteSetMaj23
	(*VoteSetBits)(nil),           // 8: cometbft.consensus.v1beta1.VoteSetBits
	(*Message)(nil),               // 9: cometbft.consensus.v1beta1.Message
	(*v1beta1.PartSetHeader)(nil), // 10: cometbft.types.v1beta1.PartSetHeader
	(*v1.BitArray)(nil),           // 11: cometbft.libs.bits.v1.BitArray
	(*v1beta1.Proposal)(nil),      // 12: cometbft.types.v1beta1.Proposal
	(*v1beta1.Part)(nil),          // 13: cometbft.types.v1beta1.Part
	(*v1beta1.Vote)(nil),          // 14: cometbft.types.v1beta1.Vote
	(v1beta1.SignedMsgType)(0),    // 15: cometbft.types.v1beta1.SignedMsgType
	(*v1beta1.BlockID)(nil),       // 16: cometbft.types.v1beta1.BlockID
}
var file_cometbft_consensus_v1beta1_types_proto_depIdxs = []int32{
	10, // 0: cometbft.consensus.v1beta1.NewValidBlock.block_part_set_header:type_name -> cometbft.types.v1beta1.PartSetHeader
	11, // 1: cometbft.consensus.v1beta1.NewValidBlock.block_parts:type_name -> cometbft.libs.bits.v1.BitArray
	12, // 2: cometbft.consensus.v1beta1.Proposal.proposal:type_name -> cometbft.types.v1beta1.Proposal
	11, // 3: cometbft.consensus.v1beta1.ProposalPOL.proposal_pol:type_name -> cometbft.libs.bits.v1.BitArray
	13, // 4: cometbft.consensus.v1beta1.BlockPart.part:type_name -> cometbft.types.v1beta1.Part
	14, // 5: cometbft.consensus.v1beta1.Vote.vote:type_name -> cometbft.types.v1beta1.Vote
	15, // 6: cometbft.consensus.v1beta1.HasVote.type:type_name -> cometbft.types.v1beta1.SignedMsgType
	15, // 7: cometbft.consensus.v1beta1.VoteSetMaj23.type:type_name -> cometbft.types.v1beta1.SignedMsgType
	16, // 8: cometbft.consensus.v1beta1.VoteSetMaj23.block_id:type_name -> cometbft.types.v1beta1.BlockID
	15, // 9: cometbft.consensus.v1beta1.VoteSetBits.type:type_name -> cometbft.types.v1beta1.SignedMsgType
	16, // 10: cometbft.consensus.v1beta1.VoteSetBits.block_id:type_name -> cometbft.types.v1beta1.BlockID
	11, // 11: cometbft.consensus.v1beta1.VoteSetBits.votes:type_name -> cometbft.libs.bits.v1.BitArray
	0,  // 12: cometbft.consensus.v1beta1.Message.new_round_step:type_name -> cometbft.consensus.v1beta1.NewRoundStep
	1,  // 13: cometbft.consensus.v1beta1.Message.new_valid_block:type_name -> cometbft.consensus.v1beta1.NewValidBlock
	2,  // 14: cometbft.consensus.v1beta1.Message.proposal:type_name -> cometbft.consensus.v1beta1.Proposal
	3,  // 15: cometbft.consensus.v1beta1.Message.proposal_pol:type_name -> cometbft.consensus.v1beta1.ProposalPOL
	4,  // 16: cometbft.consensus.v1beta1.Message.block_part:type_name -> cometbft.consensus.v1beta1.BlockPart
	5,  // 17: cometbft.consensus.v1beta1.Message.vote:type_name -> cometbft.consensus.v1beta1.Vote
	6,  // 18: cometbft.consensus.v1beta1.Message.has_vote:type_name -> cometbft.consensus.v1beta1.HasVote
	7,  // 19: cometbft.consensus.v1beta1.Message.vote_set_maj23:type_name -> cometbft.consensus.v1beta1.VoteSetMaj23
	8,  // 20: cometbft.consensus.v1beta1.Message.vote_set_bits:type_name -> cometbft.consensus.v1beta1.VoteSetBits
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_cometbft_consensus_v1beta1_types_proto_init() }
func file_cometbft_consensus_v1beta1_types_proto_init() {
	if File_cometbft_consensus_v1beta1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*NewRoundStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NewValidBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ProposalPOL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BlockPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*HasVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*VoteSetMaj23); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*VoteSetBits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cometbft_consensus_v1beta1_types_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cometbft_consensus_v1beta1_types_proto_msgTypes[9].OneofWrappers = []any{
		(*Message_NewRoundStep)(nil),
		(*Message_NewValidBlock)(nil),
		(*Message_Proposal)(nil),
		(*Message_ProposalPol)(nil),
		(*Message_BlockPart)(nil),
		(*Message_Vote)(nil),
		(*Message_HasVote)(nil),
		(*Message_VoteSetMaj23)(nil),
		(*Message_VoteSetBits)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cometbft_consensus_v1beta1_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cometbft_consensus_v1beta1_types_proto_goTypes,
		DependencyIndexes: file_cometbft_consensus_v1beta1_types_proto_depIdxs,
		MessageInfos:      file_cometbft_consensus_v1beta1_types_proto_msgTypes,
	}.Build()
	File_cometbft_consensus_v1beta1_types_proto = out.File
	file_cometbft_consensus_v1beta1_types_proto_rawDesc = nil
	file_cometbft_consensus_v1beta1_types_proto_goTypes = nil
	file_cometbft_consensus_v1beta1_types_proto_depIdxs = nil
}
